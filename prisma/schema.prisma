datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String       @id @default(uuid())
  username     String       @unique
  email        String       @unique
  passwordHash String
  fullName     String
  bio          String?
  profilePic   String?
  createdAt    DateTime     @default(now())
  automations  Automation[]
  sessions     Session[]
  apiTokens    APIToken[]
  tasks        Task[]
  assignments  Assignment[]
  workflows    Workflow[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Automation {
  id            String   @id @default(cuid())
  title         String
  description   String
  automationUrl String
  type          String
  credentials   Json
  process       String
  fileUrl       String?
  executeAt     DateTime
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        String   @default("PENDING")
  keywords      String[]
}

model Workflow {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nodes       Node[]
  Edge        Edge[]

  @@map("workflows")
}

model Node {
  id            String   @id @default(uuid())
  name          String
  type          String
  positionX     Float
  positionY     Float
  workflowId    String
  workflow      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tasks         Task[]
  outgoingEdges Edge[]   @relation("NodeOutgoingEdges")
  incomingEdges Edge[]   @relation("NodeIncomingEdges")

  @@map("nodes")
}

model Edge {
  id         String   @id @default(uuid())
  sourceId   String
  targetId   String
  workflowId String
  source     Node     @relation("NodeOutgoingEdges", fields: [sourceId], references: [id], onDelete: Cascade)
  target     Node     @relation("NodeIncomingEdges", fields: [targetId], references: [id], onDelete: Cascade)
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("edges")
}

model Task {
  id            String      @id @default(uuid())
  title         String
  description   String?
  status        String      @default("pending")
  dueDate       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  nodeId        String
  node          Node        @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  dependentOnId String?
  assignment    Assignment?
}

model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String?
  fileUrl     String
  uploadedAt  DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String?  @unique
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model APIToken {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider     String
  accessToken  String
  refreshToken String?
  tokenExpiry  DateTime?
  createdAt    DateTime  @default(now())

  @@unique([userId, provider])
}
