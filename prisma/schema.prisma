datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Core User Model
model User {
  id              String            @id @default(uuid())
  username        String            @unique
  email           String            @unique
  passwordHash    String
  fullName        String
  bio             String?
  profilePic      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lastLogin       DateTime?
  plan         String    @default("Free") // "Free", "Premium", "Enterprise"
  socialLinks  Json?
  twoFAEnabled  Boolean   @default(false)
  phoneNumber   String?
  sessionTimeout Int      @default(30)
  theme         String    @default("dark")
  fontSize      String    @default("16")
  activityLogs    UserActivityLog[]
  analyticsEvents AnalyticsEvent[]
  automations     Automation[]
  sessions        Session[]
  apiTokens       APIToken[]
  tasks           Task[]
  assignments     Assignment[]
  workflows       Workflow[]
  messages        Message[]
  teamMembers     TeamMember[]
  documents       Document[]
  events          Event[]
  integrations    Integration[]
  billings        Billing[]
  supportTickets   SupportTicket[]
  contactSubmissions ContactSubmission[]
}

// Session Model
model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// User Activity Log for tracking user actions
model UserActivityLog {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String    // e.g., "login", "task_created", "workflow_executed"
  entityType String?   // e.g., "task", "workflow", "document"
  entityId   String?   // ID of the entity acted upon
  timestamp  DateTime  @default(now())
  metadata   Json?     // Additional context (e.g., IP, device)
}

// System Metrics for performance monitoring
model SystemMetric {
  id         String    @id @default(uuid())
  metricType String    // e.g., "api_response_time", "uptime", "error_rate"
  value      Float     // Metric value (e.g., 200ms, 99.9%)
  recordedAt DateTime  @default(now())
  metadata   Json?     // Additional details (e.g., endpoint, error code)
}

// Analytics Event for custom usage tracking
model AnalyticsEvent {
  id        String    @id @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventType String    // e.g., "page_view", "button_click", "integration_connected"
  eventData Json      // Event-specific data
  timestamp DateTime  @default(now())
}

// Automation Model
model Automation {
  id           String      @id @default(cuid())
  title        String
  description  String
  automationUrl String
  type         String
  credentials  Json?
  process      String
  fileUrl      String?
  executeAt    DateTime
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  status       String      @default("PENDING")
  keywords     String[]
  executions   Execution[]
  successRate  Float?
  lastExecuted DateTime?
}

// Execution Model
model Execution {
  id           String     @id @default(uuid())
  automationId String
  automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  executedAt   DateTime   @default(now())
  success      Boolean    // Success or failure of execution
  result       String?    // Result or error message
}

// Workflow Model
model Workflow {
  id          String    @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  nodes       Node[]
  edges       Edge[]
  status      String    @default("INACTIVE") // "INACTIVE", "ACTIVE"
}

// Node Model
model Node {
  id            String    @id @default(uuid())
  name          String
  type          String    // "trigger", "action", "condition"
  positionX     Float
  positionY     Float
  description   String?
  config        Json      // Configuration details
  workflowId    String
  workflow      Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tasks         Task[]
  outgoingEdges Edge[]    @relation("NodeOutgoingEdges")
  incomingEdges Edge[]    @relation("NodeIncomingEdges")

  @@map("nodes")
}

// Edge Model
model Edge {
  id         String   @id @default(uuid())
  sourceId   String
  targetId   String
  workflowId String
  source     Node     @relation("NodeOutgoingEdges", fields: [sourceId], references: [id], onDelete: Cascade)
  target     Node     @relation("NodeIncomingEdges", fields: [targetId], references: [id], onDelete: Cascade)
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("edges")
}

// Task Model
model Task {
  id            String       @id @default(uuid())
  title         String
  description   String?
  status        String       @default("pending") // "pending", "in_progress", "completed"
  dueDate       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  priority      String       @default("medium") // "low", "medium", "high"
  labels        String[]     @default([])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  nodeId        String?
  node          Node?        @relation(fields: [nodeId], references: [id], onDelete: SetNull)
  dependentOnId String?
  dependentOn   Task?        @relation("TaskDependencies", fields: [dependentOnId], references: [id], onDelete: SetNull)
  dependencies  Task[]       @relation("TaskDependencies")
  assignment    Assignment?
  eventId       String?      @unique
  event         Event?       @relation(fields: [eventId], references: [id], onDelete: SetNull)
}

// Assignment Model
model Assignment {
  id          String    @id @default(uuid())
  title       String
  description String?
  fileUrl     String    // URL to uploaded file
  uploadedAt  DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String?   @unique
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

// API Token Model
model APIToken {
  id           String      @id @default(uuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider     String      // e.g., "Slack", "Google Drive", "Stripe"
  accessToken  String
  refreshToken String?
  tokenExpiry  DateTime?
  createdAt    DateTime    @default(now())
  integrationId String?     @unique
  integration  Integration? @relation(fields: [integrationId], references: [id], onDelete: SetNull)

  @@unique([userId, provider])
}

// Integration Model
model Integration {
  id          String    @id @default(uuid())
  userId      String
  name        String
  description String?
  status      String    @default("DISCONNECTED") // "CONNECTED" or "DISCONNECTED"
  connectedAt DateTime?
  permissions String[]  @default([])
  authToken   String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiToken    APIToken?

  @@unique([name, userId])
}

// Document Model
model Document {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String?
  fileUrl   String?
  fileType  String?
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Event Model
model Event {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  start       DateTime
  end         DateTime?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task?
}

model Message {
  id         String    @id @default(uuid())
  content    String
  sender     String    // "user" or "ai"
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  attachment String?   // Added for file URLs
}

// Team Member Model
model TeamMember {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  role      String    // "admin", "member", "viewer"
  status    String    @default("invited") // "invited", "active", "pending"
  invitedAt DateTime  @default(now())
}

// Billing Model
model Billing {
  id                          String          @id @default(uuid())
  userId                      String          @unique
  plan                        String          @default("Free")
  status                      String          @default("inactive")
  amount                      Float           @default(0)
  billingDate                 DateTime?
  stripeCustomerId            String?
  stripeSubscriptionId        String?
  stripeDefaultPaymentMethodId String?
  user                        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethods              PaymentMethod[]
  invoices                    Invoice[]
}

// Payment Method Model
model PaymentMethod {
  id        String  @id @default(uuid())
  billingId String
  type      String
  lastFour  String
  expiry    String
  billing   Billing @relation(fields: [billingId], references: [id], onDelete: Cascade)
}

// Invoice Model
model Invoice {
  id             String   @id @default(uuid())
  billingId      String
  amount         Float
  status         String   @default("pending")
  issuedAt       DateTime @default(now())
  stripeInvoiceId String?
  billing        Billing  @relation(fields: [billingId], references: [id], onDelete: Cascade)
}


model SupportTicket {
  id          String   @id @default(uuid())
  userId      String
  subject     String
  description String
  status      String   @default("open") // "open", "in_progress", "resolved"
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactSubmission {
  id        String   @id @default(uuid())
  userId    String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
