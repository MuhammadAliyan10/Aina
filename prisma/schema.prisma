datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  email         String       @unique
  passwordHash  String
  fullName      String
  bio           String?
  profilePic    String?
  createdAt     DateTime     @default(now())
  automations  Automation[]
  sessions      Session[]
  apiTokens     APIToken[]
  tasks         Task[]
  assignments   Assignment[]
  workflows     Workflow[]   // ✅ One user has multiple workflows
  flows         Flow[]       // ✅ One user has multiple flows
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


model Automation {
  id          String      @id @default(cuid())
  title       String
  description String
  automationUrl String
  type        String
  credentials Json
  process     String
  fileUrl     String? 
  executeAt   DateTime
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      String      @default("PENDING") 
  keywords String[]
}
model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   @default("pending") // pending, in_progress, completed
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  workflowId  String  // ✅ Each Task belongs to a Workflow
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  dependentOnId String?
  assignment   Assignment?
}

model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String?
  fileUrl     String
  uploadedAt  DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String?  @unique
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model APIToken {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider    String   
  accessToken String
  refreshToken String?  
  tokenExpiry DateTime?
  createdAt   DateTime @default(now())

  @@unique([userId, provider]) 
}
model Flow {
  id     String @id
  userId String
  nodes  Json
  edges   Json
  user   User   @relation(fields: [userId], references: [id])
}
model Workflow {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tasks       Task[] // ✅ One Workflow has multiple Tasks

  @@map("workflows") // ✅ Table name in DB
}
