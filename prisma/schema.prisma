datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  email         String       @unique
  passwordHash  String
  fullName      String
  bio           String?
  profilePic    String?
  createdAt     DateTime     @default(now())
  sessions      Session[]
  apiTokens     APIToken[]
  tasks         Task[]
  assignments   Assignment[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Task {
  id           String   @id @default(uuid())
  title        String
  description  String?
  status       String   @default("pending") // pending, in_progress, completed
  dueDate      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment   Assignment? // Optional Assignment linked to a Task
}

model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String?
  fileUrl     String   // URL where the assignment is stored
  uploadedAt  DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String?  @unique // Optional relation to a Task
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model APIToken {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider     String   // e.g., "WhatsApp", "Google", "Slack"
  accessToken  String
  refreshToken String?  // Optional if provider uses refresh tokens
  tokenExpiry  DateTime?
  createdAt    DateTime @default(now())

  @@unique([userId, provider]) // Ensure a user has only one token per provider
}
